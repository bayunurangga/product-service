apiVersion: v1
kind: Namespace
metadata:
  name: product-namespace
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: product-service-config
  namespace: product-namespace
data:
  SPRING_PROFILES_ACTIVE: "prod"
  SPRING_DATASOURCE_URL: "jdbc:h2:mem:productdb"
  SPRING_DATASOURCE_USERNAME: "sa"
  SPRING_REDIS_HOST: "redis-service"
  SPRING_REDIS_PORT: "6379"
---
apiVersion: v1
kind: Secret
metadata:
  name: product-service-secret
  namespace: product-namespace
type: Opaque
data:
  SPRING_DATASOURCE_PASSWORD: cGFzc3dvcmQ=  # 'password' encoded in base64
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: product-namespace
spec:
  selector:
    matchLabels:
      app: redis
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7.0-alpine
        resources:
          limits:
            memory: "128Mi"
            cpu: "100m"
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: product-namespace
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
  namespace: product-namespace
spec:
  selector:
    matchLabels:
      app: product-service
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: product-service
    spec:
      containers:
      - name: product-service
        image: username/product-service:latest  # Will be replaced by CI/CD
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "200m"
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: product-service-config
        - secretRef:
            name: product-service-secret
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: product-service
  namespace: product-namespace
spec:
  selector:
    app: product-service
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: product-service-ingress
  namespace: product-namespace
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: product-api.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: product-service
            port:
              number: 80